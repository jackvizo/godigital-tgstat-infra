- name: Install Certbot and dependencies
  ansible.builtin.apt:
    name:
      - certbot
      - python3-certbot-nginx
    state: present
    update_cache: yes
  become: true
  become_user: root

- name: Check if frontend certificate exists
  ansible.builtin.stat:
    path: /etc/letsencrypt/live/{{ frontend_subdomain | default('') ~ (frontend_subdomain | length > 0) | ternary('.', '') }}{{ project_domain }}/fullchain.pem
  register: certbot_frontend_cert_check

- name: Dry run Certbot for frontend domain
  ansible.builtin.command:
    cmd: >
      certbot certonly --dry-run --nginx -n --agree-tos --email {{ letsencrypt_email }}
      -d {{ frontend_subdomain | default('') ~ (frontend_subdomain | length > 0) | ternary('.', '') }}{{ project_domain }}
  register: certbot_dry_run_frontend
  when: certbot_frontend_cert_check.stat.exists == false
  become: true
  become_user: root  

- name: Obtain SSL certificates from Let's Encrypt for frontend domain
  ansible.builtin.command:
    cmd: >
      certbot --nginx -n --agree-tos --email {{ letsencrypt_email }}
      --redirect --expand
      -d {{ frontend_subdomain | default('') ~ (frontend_subdomain | length > 0) | ternary('.', '') }}{{ project_domain }}
  register: certbot_result_frontend
  ignore_errors: true
  when: certbot_frontend_cert_check.stat.exists == false
  become: true
  become_user: root

- name: Check Certbot result for frontend domain
  ansible.builtin.fail:
    msg: "Failed to obtain SSL certificates for {{ frontend_subdomain | default('') ~ (frontend_subdomain | length > 0) | ternary('.', '') }}{{ project_domain }}"
  when: certbot_result_frontend.rc != 0 and certbot_frontend_cert_check.stat.exists == false

- name: Check if graphql certificate exists
  ansible.builtin.stat:
    path: /etc/letsencrypt/live/{{ graphql_subdomain | default('') ~ (graphql_subdomain | length > 0) | ternary('.', '') }}{{ project_domain }}/fullchain.pem
  register: certbot_graphql_cert_check

- name: Dry run Certbot for graphql domain
  ansible.builtin.command:
    cmd: >
      certbot certonly --dry-run --nginx -n --agree-tos --email {{ letsencrypt_email }}
      -d {{ graphql_subdomain | default('') ~ (graphql_subdomain | length > 0) | ternary('.', '') }}{{ project_domain }}
  register: certbot_dry_run_graphql
  become: true
  become_user: root
  when: certbot_graphql_cert_check.stat.exists == false

- name: Obtain SSL certificates from Let's Encrypt for graphql domain
  ansible.builtin.command:
    cmd: >
      certbot --nginx -n --agree-tos --email {{ letsencrypt_email }}
      --redirect --expand
      -d {{ graphql_subdomain | default('') ~ (graphql_subdomain | length > 0) | ternary('.', '') }}{{ project_domain }}
  register: certbot_result_graphql
  ignore_errors: true
  when: certbot_graphql_cert_check.stat.exists == false
  become: true
  become_user: root

- name: Check Certbot result for graphql domain
  ansible.builtin.fail:
    msg: "Failed to obtain SSL certificates for {{ graphql_subdomain | default('') ~ (graphql_subdomain | length > 0) | ternary('.', '') }}{{ project_domain }}"
  when: certbot_result_graphql.rc != 0 and certbot_graphql_cert_check.stat.exists == false

- name: Check if sso certificate exists
  ansible.builtin.stat:
    path: /etc/letsencrypt/live/{{ sso_subdomain | default('') ~ (sso_subdomain | length > 0) | ternary('.', '') }}{{ project_domain }}/fullchain.pem
  register: certbot_sso_cert_check

- name: Dry run Certbot for sso domain
  ansible.builtin.command:
    cmd: >
      certbot certonly --dry-run --nginx -n --agree-tos --email {{ letsencrypt_email }}
      -d {{ sso_subdomain | default('') ~ (sso_subdomain | length > 0) | ternary('.', '') }}{{ project_domain }}
  register: certbot_dry_run_sso
  become: true
  become_user: root
  when: certbot_sso_cert_check.stat.exists == false

- name: Obtain SSL certificates from Let's Encrypt for sso domain
  ansible.builtin.command:
    cmd: >
      certbot --nginx -n --agree-tos --email {{ letsencrypt_email }}
      --redirect --expand
      -d {{ sso_subdomain | default('') ~ (sso_subdomain | length > 0) | ternary('.', '') }}{{ project_domain }}
  register: certbot_result_sso
  ignore_errors: true
  when: certbot_sso_cert_check.stat.exists == false
  become: true
  become_user: root

- name: Check Certbot result for sso domain
  ansible.builtin.fail:
    msg: "Failed to obtain SSL certificates for {{ sso_subdomain | default('') ~ (sso_subdomain | length > 0) | ternary('.', '') }}{{ project_domain }}"
  when: certbot_result_sso.rc != 0 and certbot_sso_cert_check.stat.exists == false

- name: Ensure Nginx is reloaded after Certbot run
  ansible.builtin.service:
    name: nginx
    state: reloaded
  when: certbot_result_frontend.rc == 0 or certbot_result_graphql.rc == 0 or certbot_result_sso.rc == 0
  become: true
  become_user: root
