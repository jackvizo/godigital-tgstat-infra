generator client {
  provider = "prisma-client-js"
  output   = env("PRISMA_OUT")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                          String                        @id @unique @db.Uuid
  created_at                  DateTime                      @default(now())
  user_tg_channel             user_tg_channel[]
  user_tg_invite_link         user_tg_invite_link[]
  tg_invite_link_group        tg_invite_link_group[]
  config__tg_bot_session_pool config__tg_bot_session_pool[]
}

model user_tg_channel {
  pk BigInt @id @default(autoincrement())

  user_id             String                @db.Uuid
  tg_channel_id       BigInt
  tg_channel_title    String
  user                user                  @relation(fields: [user_id], references: [id])
  tg_channel__session tg_channel__session[]
}

model user_tg_invite_link {
  pk             BigInt  @id @default(autoincrement())
  user_id        String  @db.Uuid
  tg_invite_link String
  label          String?

  group_id BigInt

  user                 user                 @relation(fields: [user_id], references: [id])
  tg_invite_link_group tg_invite_link_group @relation(fields: [group_id], references: [pk])
}

model tg_invite_link_group {
  pk         BigInt @id @default(autoincrement())
  group_name String
  user_id    String @db.Uuid

  user                user                  @relation(fields: [user_id], references: [id])
  user_tg_invite_link user_tg_invite_link[]
}

model tg_channel__session {
  user_tg_channel_pk             BigInt
  config__tg_bot_session_pool_pk BigInt

  user_tg_channel             user_tg_channel             @relation(fields: [user_tg_channel_pk], references: [pk], onDelete: Cascade)
  config__tg_bot_session_pool config__tg_bot_session_pool @relation(fields: [config__tg_bot_session_pool_pk], references: [pk])

  @@id([user_tg_channel_pk, config__tg_bot_session_pool_pk])
}

model config__tg_bot_session_pool {
  pk           BigInt   @id @default(autoincrement())
  created_at   DateTime @default(now())
  phone_number String
  session_str  String
  api_id       String
  api_hash     String
  status       String   @default("enabled")
  user_id      String   @db.Uuid

  user user @relation(fields: [user_id], references: [id])

  tg_channel__session tg_channel__session[]
}

model stat_user {
  pk                BigInt    @id @default(autoincrement())
  timestamp         DateTime  @default(now())
  joined_at         DateTime?
  left_at           DateTime?
  tg_user_id        BigInt
  tg_channel_id     BigInt
  first_name        String?
  last_name         String?
  username          String?
  scam              Boolean?
  premium           Boolean?
  verified          Boolean?
  is_joined_by_link Boolean?
  phone             String?
  invite_link       String?

  @@unique([tg_user_id, tg_channel_id])
}

model stat_post {
  pk                          BigInt    @id @default(autoincrement())
  timestamp                   DateTime  @default(now())
  date_of_post                DateTime?
  tg_post_id                  BigInt
  tg_channel_id               BigInt
  views                       Int?
  views_1h                    Int?
  view_24h                    Int?
  total_reactions_count       Int?
  reactions_1h                Int?
  reaction_24h                Int?
  comments_messages_count     Int?
  comments_users_count        Int?
  comments_channels_count     Int?
  comments_messages_count_1h  Int?
  comments_messages_count_24h Int?
  forwards                    Int?
}

model stat_post_info {
  pk            BigInt    @id @default(autoincrement())
  timestamp     DateTime  @default(now())
  date_of_post  DateTime?
  tg_post_id    BigInt
  tg_channel_id BigInt
  message       String?
  link          String?
  media         String?

  views                       Int?
  views_1h                    Int?
  view_24h                    Int?
  total_reactions_count       Int?
  reactions_1h                Int?
  reaction_24h                Int?
  comments_messages_count     Int?
  comments_users_count        Int?
  comments_channels_count     Int?
  comments_messages_count_1h  Int?
  comments_messages_count_24h Int?
  forwards                    Int?

  @@unique([tg_channel_id, tg_post_id])
}

model stat_reaction {
  pk                     BigInt   @id @default(autoincrement())
  timestamp              DateTime @default(now())
  tg_post_id             BigInt
  tg_channel_id          BigInt
  reaction_count         Int?
  reaction_emoticon      String?
  reaction_emoticon_code Int?

  @@unique([tg_channel_id, tg_post_id, reaction_emoticon_code])
}

model fn_cohort_analysis {
  join_date    DateTime? @db.Date
  left_date    DateTime? @db.Date
  joined_count BigInt?
  left_count   BigInt?

  @@ignore
}

model fn_get_avg_user_lifecycle {
  avg_lifecycle_days Float?

  @@ignore
}

model fn_unsubscribes_by_links {
  invite_link  String?
  joined_count BigInt?
  left_count   BigInt?

  @@ignore
}

model fn_unsubscribes_by_periods {
  interval_label String?
  count          Int?
  percentage     Float?

  @@ignore
}

model fn_users_by_period {
  time_bucket DateTime? @db.Timestamp(6)
  count       BigInt?

  @@ignore
}
